* packages
** setup repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  )
(package-initialize)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(setq package-check-signature 'allow-unsigned)
#+End_SRC
** use-package setup

the use package way of installing and using packages for emacs
[[https://jwiegley.github.io/use-package/][homepage]]

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp/use-package")
(require 'use-package)

(with-eval-after-load 'info
  (info-initialize)
  (add-to-list 'Info-directory-list
               "~/.emacs.d/site-lisp/use-package/"))
#+END_SRC
* appearance
** colorscheme
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :ensure t
  :config
  (load-theme 'base16-gruvbox-light-medium t))
#+END_SRC
** TODO statusbar

#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC

** bars
disable all GUI bars

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** font 
#+BEGIN_SRC emacs-lisp
(set-frame-font "Hack 10" nil t)
#+END_SRC

** line numbers
does not display line numbers by default
toggle with keybinding C-= l

#+BEGIN_SRC emacs-lisp
(global-linum-mode 0)
(global-set-key (kbd "C-; l") 'global-linum-mode)
#+END_SRC

** TODO startup prompt
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

* backup

Place backup files in a specific folder. This was copy-pasted.
Should be rewritten and customized.

#+BEGIN_SRC emacs-lisp
;;Put backup files neatly away
(let ((backup-dir "~/.emacs.d/Emacs/backups")
      (auto-saves-dir "~/.emacs.d/Emacs/autosavedir/")
      )
  (dolist (dir (list backup-dir auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
  (setq backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-saves-dir))
        auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
        tramp-backup-directory-alist `((".*" . ,backup-dir))
        tramp-auto-save-directory auto-saves-dir
        )
  )
(setq backup-by-copying t    ; Don't delink hardlinks
      delete-old-versions t  ; Clean up the backups
      version-control t      ; Use version numbers on backups,
      kept-new-versions 3    ; keep some new versions
      kept-old-versions 2)   ; and some old ones, too
#+END_SRC

* buffers

Using helm to manage buffers easily.
- buffer menu
- bookmark files
- finding files

#+BEGIN_SRC emacs-lisp
  (use-package helm
	:ensure t
	:defer t
	:bind (("C-; f" . helm-find-files)
		  ("C-; b" . helm-buffers-list)
		  ("C-; m" . helm-bookmarks)
		  ("C-; x" . helm-M-x)
		  ("C-; y" . helm-show-kill-ring))
	:init
	(require 'helm-config))
#+END_SRC
* editing
** TODO mr-editing

customized mode for editing based on simplicity
fast movement adapted to the file type and their regions of interest (ROI)
org -> headers or other ROI (code block, links, etc.)
python -> class, methods, import block
R -> funtions

Currently implemented:
- C-[ d delete word under cursor
- C-[ D delete line under cursor
- M-n next paragraph
- M-p previous paragraph

#+BEGIN_SRC emacs-lisp
;; (load "~/.emacs.d/mr-editing.el")
#+END_SRC
** indentation

Indent with of four and use tab to allow indentation
use M-i to insert tab

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4
	indent-tabs-mode t)
#+END_SRC

** 80 column rule

Will highlight text in red if goes past 80 characters.
(does not work on startup ...)

#+BEGIN_SRC emacs-lisp
(use-package column-enforce-mode
  :ensure t
  :init)
(setq-default global-column-enforce-mode t)
#+END_SRC

** TODO autrowrap 80

still not working well

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'prog-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(setq-default fill-column 80)
(setq auto-fill-mode t)
#+END_SRC

* dired

- [ ] navigation without creating new buffers
- [ ] opening files with xdg-open

#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-al --group-directories-first")
#+END_SRC

* git

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init)
#+END_SRC

* elfeed

- [ ]  Redo setup with use-package

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-; w") 'elfeed)
(setq elfeed-feeds
      '(("https://openai.com/blog/rss/" tech)
	  ("http://feeds.feedburner.com/RBloggers?format=xml" tech)))
(setf url-queue-timeout 30)
#+END_SRC

* python

Elpy package setup with use-package, using defer t
to enable lazy loading.

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))
(setq elpy-rpc-virtualenv-path 'current)
(setq elpy-rpc-python-command "python3")
(setq elpy-interactive-python-command "python3")
#+END_SRC

* R
** ESS

Powerful emacs speaks statistics package

#+BEGIN_SRC emacs-lisp
(use-package ess
 :ensure t
 :init (require 'ess-site))
#+END_SRC

* yasnippets

Enable yasnippets for all modes

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
    (yas-global-mode 1))
#+END_SRC

* flycheck

Syntax checking for all modes

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
    (global-flycheck-mode t))
#+END_SRC
